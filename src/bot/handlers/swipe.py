# src/bot/handlers/swipe.py
from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.bot.keyboards.swipe import get_swipe_keyboard
from src.bot.services.swipe import SwipeService
from src.bot.states.swipe_states import SwipeStates

swipe_router = Router()


@swipe_router.message(Command("search"))
async def start_search(message: Message, swipe_service: SwipeService, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
    next_profile = await swipe_service.get_next_profile(user_id)

    if not next_profile:
        await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
    await state.set_state(SwipeStates.normal_browsing)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∫–µ—Ç—É
    profile_text = swipe_service.format_profile(next_profile)

    if next_profile.photo_id:
        await message.answer_photo(
            photo=next_profile.photo_id, caption=profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id)
        )
    else:
        await message.answer(profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id))


@swipe_router.callback_query(F.data == "show_likes_yes")
async def show_who_liked_me(callback: CallbackQuery, swipe_service: SwipeService, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª
    profiles = await swipe_service.get_profiles_who_liked_me(user_id)

    if not profiles:
        await callback.message.edit_text("–ù–∏–∫—Ç–æ –ø–æ–∫–∞ –Ω–µ –ª–∞–π–∫–Ω—É–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É üòî")
        await callback.answer()
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–∞–π–∫–Ω—É–≤—à–∏—Ö"
    await state.set_state(SwipeStates.viewing_likes)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö (–ë–ï–ó –∏–º–µ–Ω–∏)
    first_profile = profiles[0]
    profile_text = swipe_service.format_profile(first_profile)

    if first_profile.photo_id:
        await callback.message.answer_photo(
            photo=first_profile.photo_id, caption=profile_text, reply_markup=get_swipe_keyboard(first_profile.tg_id)
        )
    else:
        await callback.message.answer(profile_text, reply_markup=get_swipe_keyboard(first_profile.tg_id))

    await callback.message.delete()
    await callback.answer("–°–º–æ—Ç—Ä–∏ –∫—Ç–æ —Ç–µ–±—è –ª–∞–π–∫–Ω—É–ª! ‚ù§Ô∏è")


@swipe_router.callback_query(F.data == "show_likes_no")
async def decline_show_likes(callback: CallbackQuery):
    """–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö"""
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å /search")
    await callback.answer()


@swipe_router.callback_query(F.data.startswith("like_"))
async def process_like_callback(callback: CallbackQuery, swipe_service: SwipeService, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫"""
    to_user_id = int(callback.data.split("_")[1])
    from_user_id = callback.from_user.id

    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∞–π–∫
    result = await swipe_service.process_like(from_user_id, to_user_id, bot)

    # –ï—Å–ª–∏ –º—ç—Ç—á - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º username
    if result["is_match"]:
        matched_user = result["matched_user"]
        username_display = (
            f"@{matched_user.username}"
            if hasattr(matched_user, "username") and matched_user.username
            else "–±–µ–∑ username"
        )

        await callback.message.answer(
            f"üî• –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n\n"
            f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {username_display}\n\n"
            f"–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ! üí¨"
        )

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state == SwipeStates.viewing_likes:
        # –ï—Å–ª–∏ —Å–º–æ—Ç—Ä–µ–ª–∏ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑ –Ω–∏—Ö
        profiles = await swipe_service.get_profiles_who_liked_me(from_user_id)
        next_profile = profiles[0] if profiles else await swipe_service.get_next_profile(from_user_id)
        hide_name = bool(profiles)
    else:
        # –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        next_profile = result["next_profile"]
        hide_name = False

    if not next_profile:
        await callback.message.answer("üòî –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await state.clear()
        await callback.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    profile_text = swipe_service.format_profile(next_profile, hide_name=hide_name)

    if next_profile.photo_id:
        await callback.message.answer_photo(
            photo=next_profile.photo_id, caption=profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id)
        )
    else:
        await callback.message.answer(profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id))

    await callback.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


@swipe_router.callback_query(F.data.startswith("dislike_"))
async def process_dislike_callback(callback: CallbackQuery, swipe_service: SwipeService, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–∏–∑–ª–∞–π–∫"""
    to_user_id = int(callback.data.split("_")[1])
    from_user_id = callback.from_user.id

    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∑–ª–∞–π–∫
    result = await swipe_service.process_dislike(from_user_id, to_user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state == SwipeStates.viewing_likes:
        # –ï—Å–ª–∏ —Å–º–æ—Ç—Ä–µ–ª–∏ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑ –Ω–∏—Ö
        profiles = await swipe_service.get_profiles_who_liked_me(from_user_id)
        next_profile = profiles[0] if profiles else await swipe_service.get_next_profile(from_user_id)
        hide_name = bool(profiles)
    else:
        # –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        next_profile = result["next_profile"]
        hide_name = False

    if not next_profile:
        await callback.message.answer("üòî –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await state.clear()
        await callback.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    profile_text = swipe_service.format_profile(next_profile, hide_name=hide_name)

    if next_profile.photo_id:
        await callback.message.answer_photo(
            photo=next_profile.photo_id, caption=profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id)
        )
    else:
        await callback.message.answer(profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id))

    await callback.answer("üëé –ü—Ä–æ–ø—É—â–µ–Ω–æ")


@swipe_router.message(Command("matches"))
async def show_matches(message: Message, swipe_service: SwipeService):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º—ç—Ç—á–µ–π —Å username"""
    user_id = message.from_user.id
    matches = await swipe_service.matches_dao.get_user_matches(user_id)

    if not matches:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π üòî")
        return

    matches_text = "üíï –¢–≤–æ–∏ –º—ç—Ç—á–∏:\n\n"
    for match in matches:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        other_user_id = match.user2_id if match.user1_id == user_id else match.user1_id
        other_user = await swipe_service.users_dao.get_by_tg_id(other_user_id)

        if other_user:
            username_display = (
                f"@{other_user.username}" if hasattr(other_user, "username") and other_user.username else "–±–µ–∑ username"
            )
            matches_text += f"‚Ä¢ {other_user.name} - {username_display}\n"

    await message.answer(matches_text)
