# src/bot/handlers/swipe.py
"""
TODO –¥–ª—è –¥–∂—É–Ω–∞: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

–ü–†–û–ë–õ–ï–ú–´ –¢–ï–ö–£–©–ï–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´:
1. Handler –¥–µ–ª–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ - –Ω–∞—Ä—É—à–µ–Ω–∏–µ Single Responsibility Principle
2. –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç (4 —Ä–∞–∑–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –æ–¥–Ω–∞ –∏ —Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞)
3. Service –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è UI (format_profile, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ bot.send_message)
4. Handler –Ω–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ DAO (matches_dao, users_dao) - –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å–ª–æ—ë–≤
5. –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Ä–∞–∑–º–∞–∑–∞–Ω–∞ –º–µ–∂–¥—É handler –∏ service

–ü–õ–ê–ù –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:
1. –°–æ–∑–¥–∞—Ç—å Presenter/View —Å–ª–æ–π –¥–ª—è UI-–ª–æ–≥–∏–∫–∏:
   - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∫–µ—Ç (format_profile)
   - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (send_profile, send_match_notification)
   - –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ keyboards, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ presenter)

2. –û—á–∏—Å—Ç–∏—Ç—å Service –æ—Ç UI:
   - –£–±—Ä–∞—Ç—å format_profile() –∏–∑ SwipeService
   - –£–±—Ä–∞—Ç—å bot.send_message() –∏–∑ process_like/process_dislike
   - Service –¥–æ–ª–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
   - –í—ã–Ω–µ—Å—Ç–∏ —Ä–∞–±–æ—Ç—É —Å –ë–î-—Å–µ—Å—Å–∏—è–º–∏ –∏–∑ service –≤ DAO

3. –£–ø—Ä–æ—Å—Ç–∏—Ç—å Handler:
   - –í—ã–Ω–µ—Å—Ç–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥/presenter
   - Handler –¥–æ–ª–∂–µ–Ω —Ç–æ–ª—å–∫–æ: –ø—Ä–∏–Ω—è—Ç—å —Å–æ–±—ã—Ç–∏–µ ‚Üí –≤—ã–∑–≤–∞—Ç—å service ‚Üí –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ presenter
   - –£–±—Ä–∞—Ç—å –ø—Ä—è–º—ã–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ DAO (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ service)

4. –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–ª–æ—ë–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å:
   Handler (–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä) ‚Üí Service (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞) ‚Üí DAO (–¥–∞–Ω–Ω—ã–µ)
                      ‚Üò Presenter (UI) ‚Üó

–ü–†–ò–ú–ï–† –ü–†–ê–í–ò–õ–¨–ù–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´:
@swipe_router.message(Command("search"))
async def start_search(message: Message, swipe_service: SwipeService, presenter: SwipePresenter):
    user_id = message.from_user.id
    next_profile = await swipe_service.get_next_profile(user_id)

    if not next_profile:
        await presenter.send_no_profiles_message(message)
        return

    await presenter.send_profile(message, next_profile, is_first=True)
"""

from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from src.bot.keyboards.swipe import get_swipe_keyboard
from src.bot.services.swipe import SwipeService
from src.bot.states.swipe_states import SwipeStates

swipe_router = Router()


@swipe_router.message(Command("search"))
async def start_search(message: Message, swipe_service: SwipeService, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç"""
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É
    next_profile = await swipe_service.get_next_profile(user_id)

    if not next_profile:
        await message.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä"
    await state.set_state(SwipeStates.normal_browsing)

    # TODO: –ü–†–û–ë–õ–ï–ú–ê #1 - Handler –¥–µ–ª–∞–µ—Ç UI-—Ä–∞–±–æ—Ç—É
    # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è 4 —Ä–∞–∑–∞ –≤ —Ñ–∞–π–ª–µ (—Å—Ç—Ä–æ–∫–∏ 73-80, 171-178, 215-222)
    # –†–µ—à–µ–Ω–∏–µ: —Å–æ–∑–¥–∞—Ç—å SwipePresenter —Å –º–µ—Ç–æ–¥–æ–º send_profile(message, profile, state)
    profile_text = swipe_service.format_profile(next_profile)  # format_profile –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ service!

    if next_profile.photo_id:
        await message.answer_photo(
            photo=next_profile.photo_id, caption=profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id)
        )
    else:
        await message.answer(profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id))


@swipe_router.callback_query(F.data == "show_likes_yes")
async def show_who_liked_me(callback: CallbackQuery, swipe_service: SwipeService, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—ã —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª"""
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª
    profiles = await swipe_service.get_profiles_who_liked_me(user_id)

    if not profiles:
        await callback.message.edit_text("–ù–∏–∫—Ç–æ –ø–æ–∫–∞ –Ω–µ –ª–∞–π–∫–Ω—É–ª —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É üòî")
        await callback.answer()
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–ø—Ä–æ—Å–º–æ—Ç—Ä –ª–∞–π–∫–Ω—É–≤—à–∏—Ö"
    await state.set_state(SwipeStates.viewing_likes)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö (–ë–ï–ó –∏–º–µ–Ω–∏)
    first_profile = profiles[0]
    profile_text = swipe_service.format_profile(first_profile)

    if first_profile.photo_id:
        await callback.message.answer_photo(
            photo=first_profile.photo_id, caption=profile_text, reply_markup=get_swipe_keyboard(first_profile.tg_id)
        )
    else:
        await callback.message.answer(profile_text, reply_markup=get_swipe_keyboard(first_profile.tg_id))

    await callback.message.delete()
    await callback.answer("–°–º–æ—Ç—Ä–∏ –∫—Ç–æ —Ç–µ–±—è –ª–∞–π–∫–Ω—É–ª! ‚ù§Ô∏è")


@swipe_router.callback_query(F.data == "show_likes_no")
async def decline_show_likes(callback: CallbackQuery):
    """–û—Ç–∫–∞–∑ –æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö"""
    await callback.message.edit_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å /search")
    await callback.answer()


@swipe_router.callback_query(F.data.startswith("like_"))
async def process_like_callback(callback: CallbackQuery, swipe_service: SwipeService, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–∞–π–∫"""
    to_user_id = int(callback.data.split("_")[1])
    from_user_id = callback.from_user.id

    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    # TODO: –ü–†–û–ë–õ–ï–ú–ê #2 - Service –ø—Ä–∏–Ω–∏–º–∞–µ—Ç bot –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    # process_like –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è! –≠—Ç–æ —Ä–∞–±–æ—Ç–∞ Handler –∏–ª–∏ Presenter
    # Service –¥–æ–ª–∂–µ–Ω —Ç–æ–ª—å–∫–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º—ç—Ç—á–µ, –∞ Handler —Ä–µ—à–∞–µ—Ç —á—Ç–æ —Å –Ω–∏–º–∏ –¥–µ–ª–∞—Ç—å
    result = await swipe_service.process_like(from_user_id, to_user_id, bot)

    # TODO: –ü–†–û–ë–õ–ï–ú–ê #3 - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –≤ Handler + –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ dict
    # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ Presenter
    #
    # ‚ùå –ü–õ–û–•–û: result["is_match"] - –º–æ–∂–Ω–æ –æ—à–∏–±–∏—Ç—å—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–ª—é—á–∞
    # ‚úÖ –•–û–†–û–®–û: result.is_match - –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
    #
    # –ü–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞ –±—É–¥–µ—Ç:
    # result = await swipe_service.process_like(from_user_id, to_user_id)  # –ë–ï–ó bot!
    # if result.is_match:  # Pydantic –º–æ–¥–µ–ª—å –≤–º–µ—Å—Ç–æ dict
    #     await presenter.send_match_notification(callback.message, result.matched_user)
    if result["is_match"]:
        matched_user = result["matched_user"]
        username_display = (
            f"@{matched_user.username}"
            if hasattr(matched_user, "username") and matched_user.username
            else "–±–µ–∑ username"
        )

        await callback.message.answer(
            f"üî• –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n\n"
            f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: {username_display}\n\n"
            f"–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ! üí¨"
        )

    # TODO: –ü–†–û–ë–õ–ï–ú–ê #4 - –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤ Handler
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∫–µ—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ Service, –∞ –Ω–µ –∑–¥–µ—Å—å
    # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –≤ process_dislike_callback (—Å—Ç—Ä–æ–∫–∏ 195-204)
    if current_state == SwipeStates.viewing_likes:
        # –ï—Å–ª–∏ —Å–º–æ—Ç—Ä–µ–ª–∏ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑ –Ω–∏—Ö
        profiles = await swipe_service.get_profiles_who_liked_me(from_user_id)
        next_profile = profiles[0] if profiles else await swipe_service.get_next_profile(from_user_id)
        hide_name = bool(profiles)
    else:
        # –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        next_profile = result["next_profile"]
        hide_name = False

    if not next_profile:
        await callback.message.answer("üòî –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await state.clear()
        await callback.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    profile_text = swipe_service.format_profile(next_profile, hide_name=hide_name)

    if next_profile.photo_id:
        await callback.message.answer_photo(
            photo=next_profile.photo_id, caption=profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id)
        )
    else:
        await callback.message.answer(profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id))

    await callback.answer("‚ù§Ô∏è –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


@swipe_router.callback_query(F.data.startswith("dislike_"))
async def process_dislike_callback(callback: CallbackQuery, swipe_service: SwipeService, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–∏–∑–ª–∞–π–∫"""
    to_user_id = int(callback.data.split("_")[1])
    from_user_id = callback.from_user.id

    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏–∑–ª–∞–π–∫
    result = await swipe_service.process_dislike(from_user_id, to_user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state == SwipeStates.viewing_likes:
        # –ï—Å–ª–∏ —Å–º–æ—Ç—Ä–µ–ª–∏ –ª–∞–π–∫–Ω—É–≤—à–∏—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–∑ –Ω–∏—Ö
        profiles = await swipe_service.get_profiles_who_liked_me(from_user_id)
        next_profile = profiles[0] if profiles else await swipe_service.get_next_profile(from_user_id)
        hide_name = bool(profiles)
    else:
        # –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        next_profile = result["next_profile"]
        hide_name = False

    if not next_profile:
        await callback.message.answer("üòî –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await state.clear()
        await callback.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    profile_text = swipe_service.format_profile(next_profile, hide_name=hide_name)

    if next_profile.photo_id:
        await callback.message.answer_photo(
            photo=next_profile.photo_id, caption=profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id)
        )
    else:
        await callback.message.answer(profile_text, reply_markup=get_swipe_keyboard(next_profile.tg_id))

    await callback.answer("üëé –ü—Ä–æ–ø—É—â–µ–Ω–æ")


@swipe_router.message(Command("matches"))
async def show_matches(message: Message, swipe_service: SwipeService):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º—ç—Ç—á–µ–π —Å username"""
    user_id = message.from_user.id

    # TODO: –ü–†–û–ë–õ–ï–ú–ê #5 - Handler –Ω–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ DAO!
    # –≠—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–ª–æ—ë–≤. Handler –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–∏ DAO
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ: await swipe_service.get_user_matches(user_id)
    matches = await swipe_service.matches_dao.get_user_matches(user_id)

    if not matches:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π üòî")
        return

    # TODO: –ü–†–û–ë–õ–ï–ú–ê #6 - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤ Handler
    # –ü–æ–ª—É—á–µ–Ω–∏–µ other_user –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ Service/Presenter
    matches_text = "üíï –¢–≤–æ–∏ –º—ç—Ç—á–∏:\n\n"
    for match in matches:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        other_user_id = match.user2_id if match.user1_id == user_id else match.user1_id
        other_user = await swipe_service.users_dao.get_by_tg_id(other_user_id)  # –û–ø—è—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ DAO!

        if other_user:
            username_display = (
                f"@{other_user.username}" if hasattr(other_user, "username") and other_user.username else "–±–µ–∑ username"
            )
            matches_text += f"‚Ä¢ {other_user.name} - {username_display}\n"

    await message.answer(matches_text)
