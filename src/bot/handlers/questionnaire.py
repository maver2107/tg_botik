from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup, ReplyKeyboardRemove

from src.bot.states.form_states import FormStates
from src.users.dao import UsersDAO

questionnaire_router = Router()


@questionnaire_router.message(FormStates.waiting_for_name)
async def cmd_start(message: Message, state: FSMContext):
    name = message.text.strip()

    await state.update_data(name=name)

    await state.set_state(FormStates.waiting_for_age)
    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")


@questionnaire_router.message(FormStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age < 10 or age > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100):")
            return

        await state.update_data(age=age)
        await state.set_state(FormStates.waiting_for_gender)

        gender_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")]], resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_keyboard)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@questionnaire_router.message(FormStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    gender_text = message.text.strip()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–∞–∑—ã
    gender_map = {"üë® –ú—É–∂—Å–∫–æ–π": "male", "üë© –ñ–µ–Ω—Å–∫–∏–π": "female"}

    if gender_text not in gender_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return

    gender = gender_map[gender_text]
    await state.update_data(user_gender=gender)
    await state.set_state(FormStates.waiting_for_city)

    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=ReplyKeyboardRemove())


@questionnaire_router.message(FormStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(city=city)
    await state.set_state(FormStates.waiting_for_interests)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö (—Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è):")


@questionnaire_router.message(FormStates.waiting_for_interests)
async def process_interests(message: Message, state: FSMContext):
    interests = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    form_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await UsersDAO.update_user_data(
        tg_id=message.from_user.id,
        name=form_data.get("name"),
        age=form_data.get("age"),
        user_gender=form_data.get("user_gender"),
        city=form_data.get("city"),
        interests=interests,
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await message.answer(
        f"üéâ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"{form_data.get('name')}, {form_data.get('age')}, {form_data.get('city')} - {interests}"
    )
