from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup, ReplyKeyboardRemove

from src.bot.states.form_states import FormStates
from src.users.dao import UsersDAO

questionnaire_router = Router()

#TODO !
"""
–†–æ—É—Ç–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –≤ —Å–µ–±–µ —Ö—Ä–∞–Ω–∏—Ç—å –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫—É
–í—Å—è –ª–æ–≥–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –±–¥ - –æ—Ç–¥–µ–ª—å–Ω–æ –≤ DAO, –∞ –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ωa –±—ã—Ç—å –≤ –º–æ–¥—É–ª–µ services (—ç—Ç–æ —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º–∞—è —á–µ—Ä–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞)
–¢—É—Ç –º–∞–∫—Å–∏–º—É–º –ø—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã (–†–æ—É—Ç–µ—Ä/—Ö–µ–Ω–¥–ª–µ—Ä) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ services (–±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DAO (–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ë–î)
–í –ø–∞–ø–∫–µ /bot/services/questionnaire.py - —ç—Ç–æ –ø—É—Ç—å –¥–ª—è –º–æ–¥—É–ª—è –≥–¥–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞
–°–ø—Ä–æ—Å–∏ —É –ò–ò —á—Ç–æ —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç

–ö–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è —Ç–∞–∫, —á—Ç–æ–±—ã –æ–¥–Ω–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ —á—Ç–æ —Ç–∞–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
–ï—Å–ª–∏ —Ç—É—Ç –æ–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ –æ–ø—Ä–æ—Å –∏ –¥–µ–ª–∞–µ–º

–ù–∞–¥–æ –¥–æ–±–∞–≤–ª—è—Ç—å loger –¥–ª—è –¥–µ–±–∞–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–ø—Ä–æ—Å–∏ —É –∏–∏ —á—Ç–æ —ç—Ç–æ)

"""

@questionnaire_router.message(FormStates.waiting_for_name)
async def cmd_start(message: Message, state: FSMContext):
    name = message.text.strip()

    await state.update_data(name=name)

    await state.set_state(FormStates.waiting_for_age)
    await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")


@questionnaire_router.message(FormStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age < 10 or age > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100):")
            return

        await state.update_data(age=age)
        await state.set_state(FormStates.waiting_for_gender)

        gender_keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π")]], resize_keyboard=True
        ) # TODO —è –±—ã –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–Ω–µ—Å –±—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å (—Å–ø—Ä–æ—Å–∏ —É –∏–∏ –∫–∞–∫ –ª—É—á—à–µ)
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_keyboard)

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@questionnaire_router.message(FormStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    gender_text = message.text.strip()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–∞–∑—ã
    gender_map = {"üë® –ú—É–∂—Å–∫–æ–π": "male", "üë© –ñ–µ–Ω—Å–∫–∏–π": "female"} #TODO –ª—É—á—à–µ –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ENUM - —Å–ø—Ä–æ—Å–∏ —É –∏–∏ —á—Ç–æ —ç—Ç–æ –∏ –ø–æ–º–µ–Ω—è–π –Ω–∞ –Ω–µ–≥–æ 

    if gender_text not in gender_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return

    gender = gender_map[gender_text]
    await state.update_data(user_gender=gender)
    await state.set_state(FormStates.waiting_for_city)

    await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?", reply_markup=ReplyKeyboardRemove())


@questionnaire_router.message(FormStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(city=city)
    await state.set_state(FormStates.waiting_for_interests)
    await message.answer("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö (—Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è):")


@questionnaire_router.message(FormStates.waiting_for_interests)
async def process_interests(message: Message, state: FSMContext):
    interests = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    form_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await UsersDAO.update_user_data(
        tg_id=message.from_user.id,
        name=form_data.get("name"),
        age=form_data.get("age"),
        user_gender=form_data.get("user_gender"),
        city=form_data.get("city"),
        interests=interests,
    )

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await message.answer(
        f"üéâ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"{form_data.get('name')}, {form_data.get('age')}, {form_data.get('city')} - {interests}"
    )
