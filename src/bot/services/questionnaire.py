# src/bot/services/questionnaire.py
import logging

from aiogram.fsm.context import FSMContext

from src.bot.models.gender import Gender
from src.bot.models.responses import AgeResponse, GenderResponse
from src.bot.states.form_states import FormStates
from src.users.dao import UsersDAO

logger = logging.getLogger(__name__)


class QuestionnaireService:
    def __init__(self, users_dao: UsersDAO):
        self.users_dao = users_dao

    async def process_name(self, name: str, state: FSMContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏: {name}")
        cleaned_name = name.strip()
        await state.update_data(name=cleaned_name)
        await state.set_state(FormStates.waiting_for_age)
        return f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {cleaned_name}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"

    async def process_age(self, age_text: str, state: FSMContext) -> AgeResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞: {age_text}")
        try:
            age = int(age_text.strip())
            if age < 10 or age > 100:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age}")
                return AgeResponse(success=False, message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100):")

            await state.update_data(age=age)
            await state.set_state(FormStates.waiting_for_gender)
            logger.debug(f"–í–æ–∑—Ä–∞—Å—Ç {age} –ø—Ä–∏–Ω—è—Ç")
            return AgeResponse(success=True, message="age_processed")

        except ValueError:
            logger.warning(f"–ù–µ—á–∏—Å–ª–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {age_text}")
            return AgeResponse(success=False, message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    async def process_gender(self, gender_text: str, state: FSMContext) -> GenderResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞: {gender_text}")

        if gender_text == Gender.get_display_name(Gender.MALE):
            gender = Gender.MALE
        elif gender_text == Gender.get_display_name(Gender.FEMALE):
            gender = Gender.FEMALE
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª: {gender_text}")
            return GenderResponse(success=False, message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")

        await state.update_data(user_gender=gender)
        await state.set_state(FormStates.waiting_for_gender_interest)
        logger.debug(f"–ü–æ–ª {gender} –ø—Ä–∏–Ω—è—Ç")
        return GenderResponse(success=True, message="gender_processed")

    async def process_gender_interest(self, gender_interest_text: str, state: FSMContext) -> GenderResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ –ø–æ–ª—É"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ gender_interest: {gender_interest_text}")

        if gender_interest_text == Gender.get_display_gender_interest(Gender.MALE):
            gender_interest = Gender.MALE
        elif gender_interest_text == Gender.get_display_gender_interest(Gender.FEMALE):
            gender_interest = Gender.FEMALE
        elif gender_interest_text == Gender.get_display_gender_interest(Gender.SKIP_GENDER):
            gender_interest = Gender.SKIP_GENDER
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π gender_interest: {gender_interest_text}")
            return GenderResponse(success=False, message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")

        await state.update_data(gender_interest=gender_interest)
        await state.set_state(FormStates.waiting_for_city)
        logger.debug(f"Gender interest {gender_interest} –ø—Ä–∏–Ω—è—Ç")
        return GenderResponse(success=True, message="gender_interest_processed")

    async def process_city(self, city: str, state: FSMContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞: {city}")
        cleaned_city = city.strip()
        await state.update_data(city=cleaned_city)
        await state.set_state(FormStates.waiting_for_interests)
        logger.debug(f"–ì–æ—Ä–æ–¥ {cleaned_city} –ø—Ä–∏–Ω—è—Ç")
        return "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö (—Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è):"

    async def process_interests(self, interests: str, state: FSMContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
        logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")
        await state.update_data(interests=interests.strip())
        await state.set_state(FormStates.waiting_for_photo)
        logger.debug("–ò–Ω—Ç–µ—Ä–µ—Å—ã –ø—Ä–∏–Ω—è—Ç—ã, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ç–æ")
        return (
            "üì∏ –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è\n\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ª—É—á—à–µ!\n"
            "–ú–æ–∂–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )

    async def complete_questionnaire(self, photo_id: str, user_id: int, state: FSMContext) -> str:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        form_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await self.users_dao.update_user_data(
            tg_id=user_id,
            name=form_data.get("name"),
            age=form_data.get("age"),
            user_gender=form_data.get("user_gender"),
            gender_interest=form_data.get("gender_interest"),
            city=form_data.get("city"),
            interests=form_data.get("interests"),
            photo_id=photo_id,
        )

        await state.clear()
        logger.info(f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        caption = (
            f"{form_data.get('name')}, {form_data.get('age')}, {form_data.get('city')} ‚Äì {form_data.get('interests')}"
        )
        return caption, photo_id
