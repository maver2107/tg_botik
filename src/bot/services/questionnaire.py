# src/bot/services/questionnaire.py
import logging

from aiogram.fsm.context import FSMContext

from src.bot.models.gender import Gender
from src.bot.models.responses import AgeResponse, GenderResponse  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª–∏
from src.bot.states.form_states import FormStates
from src.users.dao import UsersDAO

logger = logging.getLogger(__name__)


class QuestionnaireService:
    def __init__(self, users_dao: UsersDAO):
        self.users_dao = users_dao

    async def process_name(self, name: str, state: FSMContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏: {name=}")
        cleaned_name = name.strip()
        await state.update_data(name=cleaned_name)
        await state.set_state(FormStates.waiting_for_age)
        return f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {cleaned_name}! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"

    async def process_age(self, age_text: str, state: FSMContext) -> AgeResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞: {age_text=}")
        try:
            age = int(age_text.strip())
            if age < 10 or age > 100:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age=}")
                return AgeResponse(success=False, message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100):")

            await state.update_data(age=age)
            await state.set_state(FormStates.waiting_for_gender)
            logger.debug(f"–í–æ–∑—Ä–∞—Å—Ç –ø—Ä–∏–Ω—è—Ç: {age=}")
            return AgeResponse(success=True, message="age_processed")

        except ValueError:
            logger.warning(f"–ù–µ—á–∏—Å–ª–æ–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {age_text=}")
            return AgeResponse(success=False, message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    async def process_gender(self, gender_text: str, state: FSMContext) -> GenderResponse:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞ - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ENUM"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞: {gender_text=}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ENUM –≤–º–µ—Å—Ç–æ gender_map
        if gender_text == "üë® –ú—É–∂—Å–∫–æ–π":
            gender = Gender.MALE
        elif gender_text == "üë© –ñ–µ–Ω—Å–∫–∏–π":
            gender = Gender.FEMALE
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª: {gender_text=}")
            return GenderResponse(success=False, message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")

        await state.update_data(user_gender=gender)
        await state.set_state(FormStates.waiting_for_city)
        logger.debug(f"–ü–æ–ª –ø—Ä–∏–Ω—è—Ç: {gender=}")
        return GenderResponse(success=True, message="gender_processed")

    async def process_city(self, city: str, state: FSMContext) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞ - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞"""
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞: {city=}")
        cleaned_city = city.strip()
        await state.update_data(city=cleaned_city)
        await state.set_state(FormStates.waiting_for_interests)
        logger.debug(f"–ì–æ—Ä–æ–¥ –ø—Ä–∏–Ω—è—Ç: {cleaned_city=}")
        return "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö (—Ö–æ–±–±–∏, —É–≤–ª–µ—á–µ–Ω–∏—è):"

    async def complete_questionnaire(self, interests: str, user_id: int, state: FSMContext) -> str:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞"""
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id=}")

        form_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await self.users_dao.update_user_data(
            tg_id=user_id,
            name=form_data.get("name"),
            age=form_data.get("age"),
            user_gender=form_data.get("user_gender"),
            city=form_data.get("city"),
            interests=interests.strip(),
        )

        await state.clear()
        logger.info(f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id=}")

        # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        gender_display = "üë® –ú—É–∂—Å–∫–æ–π" if form_data.get("user_gender") == Gender.MALE else "üë© –ñ–µ–Ω—Å–∫–∏–π"

        return (
            f"üéâ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! –í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–ò–º—è: {form_data.get('name')}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {form_data.get('age')}\n"
            f"–ü–æ–ª: {gender_display}\n"
            f"–ì–æ—Ä–æ–¥: {form_data.get('city')}\n"
            f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}"
        )
