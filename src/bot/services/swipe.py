# src/bot/services/swipe.py
import logging
from typing import Optional

from sqlalchemy import and_, select

from src.bot.dao.like import LikesDAO, MatchesDAO
from src.bot.dao.user import UsersDAO
from src.bot.enum.gender import Gender
from src.bot.keyboards.swipe import get_show_likes_keyboard
from src.bot.models.user import Users
from src.core.database import async_session_maker

logger = logging.getLogger(__name__)


class SwipeService:
    def __init__(self, likes_dao: LikesDAO, matches_dao: MatchesDAO, users_dao: UsersDAO):
        self.likes_dao = likes_dao
        self.matches_dao = matches_dao
        self.users_dao = users_dao

    async def get_next_profile(self, user_id: int) -> Optional[Users]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

        –õ–æ–≥–∏–∫–∞:
        - –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        - –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        - –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ gender_interest
        - –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∫–µ—Ç—É
        """
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_user_query = select(Users).where(Users.tg_id == user_id)
            current_user_result = await session.execute(current_user_query)
            current_user = current_user_result.scalar_one_or_none()

            if not current_user:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —É–∂–µ –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            rated_users_query = select(self.likes_dao.model.to_user_id).where(
                self.likes_dao.model.from_user_id == user_id
            )
            rated_users_result = await session.execute(rated_users_query)
            rated_user_ids = [row[0] for row in rated_users_result.all()]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç
            query = select(Users).where(
                and_(
                    Users.tg_id != user_id,  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–±—è
                    Users.tg_id.not_in(rated_user_ids) if rated_user_ids else True,  # –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ü–µ–Ω—ë–Ω–Ω—ã—Ö
                    Users.name.isnot(None),  # –¢–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
                    Users.age.isnot(None),
                    Users.city.isnot(None),
                )
            )

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ gender_interest
            if current_user.gender_interest == Gender.MALE:
                query = query.where(Users.user_gender == Gender.MALE)
            elif current_user.gender_interest == Gender.FEMALE:
                query = query.where(Users.user_gender == Gender.FEMALE)
            # –ï—Å–ª–∏ SKIP_GENDER - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö

            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∫–µ—Ç—É
            query = query.order_by(Users.id)
            result = await session.execute(query)
            next_profile = result.scalars().first()

            return next_profile

    async def get_profiles_who_liked_me(self, user_id: int) -> list[Users]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
        –Ω–æ –æ–Ω –∏—Ö –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–∏–ª
        """
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ª–∞–π–∫–Ω—É–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ
            liked_me_query = select(self.likes_dao.model.from_user_id).where(
                and_(self.likes_dao.model.to_user_id == user_id, self.likes_dao.model.is_like == True)
            )
            liked_me_result = await session.execute(liked_me_query)
            liked_me_ids = [row[0] for row in liked_me_result.all()]

            if not liked_me_ids:
                return []

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ–∫—É—â–∏–π —É–∂–µ –æ—Ü–µ–Ω–∏–ª
            rated_query = select(self.likes_dao.model.to_user_id).where(self.likes_dao.model.from_user_id == user_id)
            rated_result = await session.execute(rated_query)
            rated_ids = [row[0] for row in rated_result.all()]

            # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª, –Ω–æ –∫–æ–≥–æ –µ—â—ë –Ω–µ –æ—Ü–µ–Ω–∏–ª–∏
            not_rated_yet = [uid for uid in liked_me_ids if uid not in rated_ids]

            if not not_rated_yet:
                return []

            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—ã —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_query = select(Users).where(Users.tg_id.in_(not_rated_yet))
            users_result = await session.execute(users_query)
            return users_result.scalars().all()

    async def process_like(self, from_user_id: int, to_user_id: int, bot) -> dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - is_match: bool - –ø—Ä–æ–∏–∑–æ—à—ë–ª –ª–∏ –º—ç—Ç—á
        - next_profile: Users - —Å–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞
        - matched_user: Users - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ—Ç–æ—Ä—ã–º –º—ç—Ç—á (–µ—Å–ª–∏ –µ—Å—Ç—å)
        """
        logger.info(f"–õ–∞–π–∫ –æ—Ç {from_user_id} –∫ {to_user_id}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–∞–π–∫
        await self.likes_dao.add_like(from_user_id=from_user_id, to_user_id=to_user_id, is_like=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        is_match = await self.likes_dao.check_mutual_like(from_user_id, to_user_id)

        matched_user = None
        if is_match:
            # –°–æ–∑–¥–∞—ë–º –º—ç—Ç—á
            await self.matches_dao.create_match(from_user_id, to_user_id)
            logger.info(f"üî• MATCH! {from_user_id} –∏ {to_user_id}")

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–º–µ–Ω–∞ username
            matched_user = await self.users_dao.get_by_tg_id(to_user_id)
            current_user = await self.users_dao.get_by_tg_id(from_user_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –º—ç—Ç—á–µ
            try:
                await bot.send_message(
                    to_user_id,
                    f"üî• –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n\n"
                    f"–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É —Å @{current_user.username if hasattr(current_user, 'username') else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º'}!\n"
                    f"–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ! üí¨",
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º—ç—Ç—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user_id}: {e}")
        else:
            # –ï—Å–ª–∏ –ù–ï –º—ç—Ç—á - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–¢—ã –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è"
            try:
                await bot.send_message(
                    to_user_id, "‚ù§Ô∏è –¢—ã –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!\n\n–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ —ç—Ç–æ?", reply_markup=get_show_likes_keyboard()
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {to_user_id}: {e}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        next_profile = await self.get_next_profile(from_user_id)

        return {"is_match": is_match, "next_profile": next_profile, "matched_user": matched_user}

    async def process_dislike(self, from_user_id: int, to_user_id: int) -> dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞
        """
        logger.info(f"–î–∏–∑–ª–∞–π–∫ –æ—Ç {from_user_id} –∫ {to_user_id}")

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∑–ª–∞–π–∫
        await self.likes_dao.add_like(from_user_id=from_user_id, to_user_id=to_user_id, is_like=False)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
        next_profile = await self.get_next_profile(from_user_id)

        return {"next_profile": next_profile}

    def format_profile(self, user: Users) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        hide_name - —Å–∫—Ä—ã—Ç—å –∏–º—è (–¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª)
        """

        profile_text = f"{user.name}, {user.age}, {user.city} - {user.interests}"

        return profile_text
