from aiogram.types import Message

from src.bot.keyboards.swipe import get_swipe_keyboard
from src.bot.models.user import Users


class SwipePresenter:
    @staticmethod
    def format_profile(user: Users) -> str:
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–∫–µ—Ç—ã"""
        profile_text = f"{user.name}, {user.age}, {user.city} - {user.interests}"

        return profile_text

    @staticmethod
    async def send_profile(message: Message, profile: Users):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        profile_text = SwipePresenter.format_profile(profile)
        keyboard = get_swipe_keyboard()  # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ë–ï–ó user_id(–Ω—É–∂–Ω–Ω–æ —Å–æ—Ö—Ä–Ω–∞–∏—Ç–± –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ —é–∑–µ—Ä id)
        await message.answer_photo(photo=profile.photo_id, caption=profile_text, reply_markup=keyboard)

    @staticmethod
    def format_match_message(matched_user: Users) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º—ç—Ç—á–µ"""
        username = f"@{matched_user.username}" if matched_user.username else "–±–µ–∑ username"
        return f"üî• –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è!\n\n–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –¥—Ä—É–≥ –¥—Ä—É–≥—É!\n–ö–æ–Ω—Ç–∞–∫—Ç: {username}\n\n–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ! üí¨"

    @staticmethod
    def format_like_notification() -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ '–¢—ã –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è'"""
        return "‚ù§Ô∏è –¢—ã –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è!\n\n–ü–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ —ç—Ç–æ?"

    @staticmethod
    async def send_no_profiles_message(target: Message):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∞–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"""
        text = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"

        await target.answer(text)
